"use client";

import { useState, useEffect, useMemo, useCallback } from "react";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource";
import { Amplify } from "aws-amplify";
import outputs from "@/amplify_outputs.json";
import "@aws-amplify/ui-react/styles.css";
import { Authenticator } from "@aws-amplify/ui-react";
import Layout from "@/components/Layout";
import Link from "next/link";
import {
  Users,
  Calendar,
  FileText,
  TrendingUp,
  Clock,
  UserCheck,
  AlertCircle,
  CheckCircle,
  Bell,
  ArrowRight,
  Mail,
  Briefcase,
  Target,
  Activity,
  Award,
  Shield,
  Info,
  CheckSquare,
  XCircle,
  BarChart3,
  PieChart,
  LineChart,
  DollarSign,
  Zap,
  BookOpen,
  MessageSquare,
  Star,
  TrendingDown,
  Circle,
  ArrowUpRight,
  ArrowDownRight,
  ClipboardList,
  Settings,
  Download,
  X,
  RefreshCw,
} from "lucide-react";
import { getAuthenticatedUser, hasPermission, type UserRole } from "@/lib/auth";
import { useActivityLogger, ACTIVITY_TYPES } from "@/hooks/useActivityLogger";

Amplify.configure(outputs);

const client = generateClient<Schema>();

interface Notification {
  id: string;
  title: string;
  message: string;
  type: "info" | "warning" | "success" | "error";
  time: Date;
  read: boolean;
}

function Dashboard({ user }: { user: any }) {
  const [userRole, setUserRole] = useState<UserRole>("staff");
  const [userProfile, setUserProfile] = useState<Schema["User"]["type"] | null>(null);
  const { logActivity } = useActivityLogger();
  const [loading, setLoading] = useState(true);
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [dataCache, setDataCache] = useState<{
    users?: Array<Schema["User"]["type"]>;
    tasks?: Array<Schema["OnboardingTask"]["type"]>;
    applicants?: Array<Schema["Applicant"]["type"]>;
    documents?: Array<Schema["Document"]["type"]>;
    communications?: Array<Schema["Communication"]["type"]>;
    lastFetch?: number;
  }>({});
  const [refreshing, setRefreshing] = useState(false);
  
  // Stats
  const [stats, setStats] = useState({
    totalUsers: 0,
    pendingOnboarding: 0,
    activeApplicants: 0,
    recentDocuments: 0,
    myTasks: 0,
    completedTasks: 0,
    overdueTasks: 0,
    pendingApprovals: 0,
    // New analytics stats
    newUsersThisMonth: 0,
    userGrowthRate: 0,
    avgOnboardingTime: 0,
    taskCompletionRate: 0,
    applicantConversionRate: 0,
    communicationsSentToday: 0,
    departmentDistribution: {} as Record<string, number>,
    monthlyStats: [] as Array<{ month: string; users: number; tasks: number; applicants: number }>,
  });

  const [recentActivity, setRecentActivity] = useState<any[]>([]);
  const [upcomingTasks, setUpcomingTasks] = useState<Array<Schema["OnboardingTask"]["type"]>>([]);
  const [showScheduleModal, setShowScheduleModal] = useState(false);
  const [scheduledReports, setScheduledReports] = useState<Array<{
    id: string;
    name: string;
    frequency: 'daily' | 'weekly' | 'monthly';
    format: 'csv' | 'json' | 'pdf';
    nextRun: string;
    enabled: boolean;
  }>>([]);

  useEffect(() => {
    fetchDashboardData();
    
    // Log page view
    logActivity({
      action: ACTIVITY_TYPES.PAGE_VIEW,
      resource: 'dashboard',
      details: { userRole }
    });
  }, [fetchDashboardData, logActivity, userRole]);

  const fetchDashboardData = useCallback(async (forceRefresh = false) => {
    try {
      const now = Date.now();
      const cacheExpiry = 5 * 60 * 1000; // 5 minutes
      
      // Check if we can use cached data
      if (!forceRefresh && dataCache.lastFetch && (now - dataCache.lastFetch) < cacheExpiry) {
        console.log('Using cached data');
        return;
      }

      setLoading(!dataCache.lastFetch); // Only show loading spinner on first load
      setRefreshing(!!dataCache.lastFetch); // Show refresh indicator on subsequent loads
      
      // Get authenticated user info
      const authUser = await getAuthenticatedUser();
      if (authUser) {
        setUserRole(authUser.role);
        
        // Get user profile from cache or fetch if needed
        let users = dataCache.users;
        if (!users || forceRefresh) {
          const { data: usersData } = await client.models.User.list({
            filter: { email: { eq: authUser.email } }
          });
          users = usersData;
        }
        
        const userProfile = users.find(u => u.email === authUser.email);
        if (userProfile) {
          setUserProfile(userProfile);
        }
      }
      
      // Fetch all data in parallel only if not cached or force refresh
      let usersData, tasksData, applicantsData, documentsData, communicationsData;
      
      if (!dataCache.users || forceRefresh) {
        [
          usersData,
          tasksData,
          applicantsData,
          documentsData,
          communicationsData,
        ] = await Promise.all([
          client.models.User.list(),
          client.models.OnboardingTask.list(),
          client.models.Applicant.list(),
          client.models.Document.list(),
          client.models.Communication.list(),
        ]);
        
        // Update cache
        setDataCache({
          users: usersData.data,
          tasks: tasksData.data,
          applicants: applicantsData.data,
          documents: documentsData.data,
          communications: communicationsData.data,
          lastFetch: now,
        });
      } else {
        // Use cached data
        usersData = { data: dataCache.users };
        tasksData = { data: dataCache.tasks! };
        applicantsData = { data: dataCache.applicants! };
        documentsData = { data: dataCache.documents! };
        communicationsData = { data: dataCache.communications! };
      }
      
      // Calculate stats based on role
      const isManager = ["admin", "mentor", "team_lead"].includes(userRole);
      
      // My tasks (for regular users)
      const myTasks = userProfile 
        ? tasksData.data.filter(t => t.userId === userProfile.id)
        : [];
      
      // Pending tasks (for managers: all, for users: own)
      const pendingTasks = isManager
        ? tasksData.data.filter(t => t.status === "pending" || t.status === "in_progress")
        : myTasks.filter(t => t.status === "pending" || t.status === "in_progress");
      
      // Active applicants (managers only)
      const activeApplicants = applicantsData.data.filter(
        a => a.status !== "rejected" && a.status !== "hired"
      );
      
      // Recent documents
      const recentDocs = documentsData.data.filter(doc => {
        const uploadDate = new Date(doc.uploadDate || doc.createdAt);
        const daysSinceUpload = (Date.now() - uploadDate.getTime()) / (1000 * 60 * 60 * 24);
        return daysSinceUpload <= 7;
      });
      
      // Overdue tasks
      const overdueTasks = pendingTasks.filter(t => {
        if (!t.dueDate) return false;
        return new Date(t.dueDate) < new Date();
      });
      
      // Calculate additional analytics
      const now = new Date();
      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
      
      // New users this month
      const newUsersThisMonth = usersData.data.filter(u => {
        const startDate = new Date(u.startDate || u.createdAt);
        return startDate > thirtyDaysAgo;
      }).length;
      
      // User growth rate
      const usersLastMonth = usersData.data.filter(u => {
        const startDate = new Date(u.startDate || u.createdAt);
        const sixtyDaysAgo = new Date(now.getTime() - 60 * 24 * 60 * 60 * 1000);
        return startDate > sixtyDaysAgo && startDate <= thirtyDaysAgo;
      }).length;
      const userGrowthRate = usersLastMonth > 0 
        ? ((newUsersThisMonth - usersLastMonth) / usersLastMonth * 100).toFixed(1)
        : 0;
      
      // Average onboarding time
      const completedOnboardings = usersData.data.filter(u => u.onboardingCompleted);
      let avgOnboardingTime = 14; // default
      if (completedOnboardings.length > 0) {
        const totalDays = completedOnboardings.reduce((acc, u) => {
          if (u.startDate && u.onboardingCompleted) {
            const start = new Date(u.startDate);
            const completed = new Date(u.onboardingCompleted);
            const days = Math.floor((completed.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
            return acc + days;
          }
          return acc;
        }, 0);
        avgOnboardingTime = Math.round(totalDays / completedOnboardings.length);
      }
      
      // Task completion rate
      const totalTasks = tasksData.data.length;
      const completedTasksCount = tasksData.data.filter(t => t.status === "completed").length;
      const taskCompletionRate = totalTasks > 0 
        ? Math.round((completedTasksCount / totalTasks) * 100)
        : 0;
      
      // Applicant conversion rate
      const hiredApplicants = applicantsData.data.filter(a => a.status === "hired").length;
      const totalApplicants = applicantsData.data.length;
      const applicantConversionRate = totalApplicants > 0
        ? Math.round((hiredApplicants / totalApplicants) * 100)
        : 0;
      
      // Communications sent today
      const communicationsSentToday = communicationsData.data.filter(c => {
        const sentDate = new Date(c.sentDate || c.createdAt);
        return sentDate.toDateString() === now.toDateString();
      }).length;
      
      // Department distribution
      const departmentDistribution: Record<string, number> = {};
      usersData.data.forEach(u => {
        if (u.department) {
          departmentDistribution[u.department] = (departmentDistribution[u.department] || 0) + 1;
        }
      });
      
      // Monthly stats for the last 6 months
      const monthlyStats = [];
      for (let i = 5; i >= 0; i--) {
        const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1);
        const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 0);
        const monthName = monthStart.toLocaleDateString('en-US', { month: 'short' });
        
        const monthUsers = usersData.data.filter(u => {
          const date = new Date(u.startDate || u.createdAt);
          return date >= monthStart && date <= monthEnd;
        }).length;
        
        const monthTasks = tasksData.data.filter(t => {
          const date = new Date(t.createdAt);
          return date >= monthStart && date <= monthEnd;
        }).length;
        
        const monthApplicants = applicantsData.data.filter(a => {
          const date = new Date(a.appliedDate);
          return date >= monthStart && date <= monthEnd;
        }).length;
        
        monthlyStats.push({
          month: monthName,
          users: monthUsers,
          tasks: monthTasks,
          applicants: monthApplicants,
        });
      }
      
      // Set all stats
      setStats({
        totalUsers: usersData.data.length,
        pendingOnboarding: pendingTasks.length,
        activeApplicants: isManager ? activeApplicants.length : 0,
        recentDocuments: recentDocs.length,
        myTasks: myTasks.length,
        completedTasks: myTasks.filter(t => t.status === "completed").length,
        overdueTasks: overdueTasks.length,
        pendingApprovals: isManager ? documentsData.data.filter(d => d.signatureStatus === "pending").length : 0,
        // New analytics stats
        newUsersThisMonth,
        userGrowthRate: Number(userGrowthRate),
        avgOnboardingTime,
        taskCompletionRate,
        applicantConversionRate,
        communicationsSentToday,
        departmentDistribution,
        monthlyStats,
      });
      
      // Set upcoming tasks
      const upcoming = pendingTasks
        .filter(t => t.dueDate)
        .sort((a, b) => new Date(a.dueDate!).getTime() - new Date(b.dueDate!).getTime())
        .slice(0, 5);
      setUpcomingTasks(upcoming);
      
      // Generate notifications
      const newNotifications: Notification[] = [];
      
      if (overdueTasks.length > 0) {
        newNotifications.push({
          id: "overdue",
          title: "Overdue Tasks",
          message: `You have ${overdueTasks.length} overdue task${overdueTasks.length > 1 ? 's' : ''}`,
          type: "warning",
          time: new Date(),
          read: false,
        });
      }
      
      if (isManager && activeApplicants.length > 5) {
        newNotifications.push({
          id: "applicants",
          title: "High Application Volume",
          message: `${activeApplicants.length} active applicants in the pipeline`,
          type: "info",
          time: new Date(),
          read: false,
        });
      }
      
      if (myTasks.length > 0 && myTasks.filter(t => t.status === "completed").length === myTasks.length) {
        newNotifications.push({
          id: "onboarding-complete",
          title: "Onboarding Complete!",
          message: "Congratulations! You've completed all onboarding tasks",
          type: "success",
          time: new Date(),
          read: false,
        });
      }
      
      setNotifications(newNotifications);
      
      // Build recent activity
      const activities: any[] = [];
      
      // Recent task completions
      tasksData.data
        .filter(t => t.status === "completed" && t.completedDate)
        .sort((a, b) => new Date(b.completedDate!).getTime() - new Date(a.completedDate!).getTime())
        .slice(0, 3)
        .forEach(task => {
          activities.push({
            id: task.id,
            type: "task",
            title: `Task completed: ${task.title}`,
            time: task.completedDate,
            icon: CheckCircle,
            color: "text-green-500",
          });
        });
      
      // Recent communications
      if (isManager) {
        communicationsData.data
          .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
          .slice(0, 2)
          .forEach(comm => {
            activities.push({
              id: comm.id,
              type: "communication",
              title: `Message sent: ${comm.subject}`,
              time: comm.sentDate || comm.createdAt,
              icon: Mail,
              color: "text-blue-500",
            });
          });
      }
      
      // Sort activities by time
      activities.sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime());
      setRecentActivity(activities.slice(0, 5));
      
    } catch (error) {
      console.error("Error fetching dashboard data:", error);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  }, [dataCache, userRole]);

  const exportAnalyticsData = (format: 'csv' | 'json') => {
    // Log export activity
    logActivity({
      action: ACTIVITY_TYPES.REPORT_EXPORT,
      resource: 'analytics',
      details: { format, userRole, exportTimestamp: new Date().toISOString() }
    });
    const analyticsData = {
      timestamp: new Date().toISOString(),
      userRole,
      metrics: {
        totalUsers: stats.totalUsers,
        newUsersThisMonth: stats.newUsersThisMonth,
        userGrowthRate: stats.userGrowthRate,
        avgOnboardingTime: stats.avgOnboardingTime,
        taskCompletionRate: stats.taskCompletionRate,
        applicantConversionRate: stats.applicantConversionRate,
        communicationsSentToday: stats.communicationsSentToday,
        overdueTasks: stats.overdueTasks,
        pendingApprovals: stats.pendingApprovals,
      },
      departmentDistribution: stats.departmentDistribution,
      monthlyStats: stats.monthlyStats,
      systemHealth: {
        activeUsers: stats.totalUsers - stats.overdueTasks,
        systemHealthScore: Math.round(((stats.totalUsers - stats.overdueTasks) / stats.totalUsers) * 100) || 100,
      }
    };

    if (format === 'csv') {
      // Convert to CSV format
      const csvRows = [
        ['Metric', 'Value', 'Type'],
        ['Total Users', stats.totalUsers, 'Count'],
        ['New Users This Month', stats.newUsersThisMonth, 'Count'],
        ['User Growth Rate', `${stats.userGrowthRate}%`, 'Percentage'],
        ['Avg Onboarding Time', `${stats.avgOnboardingTime} days`, 'Duration'],
        ['Task Completion Rate', `${stats.taskCompletionRate}%`, 'Percentage'],
        ['Applicant Conversion Rate', `${stats.applicantConversionRate}%`, 'Percentage'],
        ['Communications Sent Today', stats.communicationsSentToday, 'Count'],
        ['Overdue Tasks', stats.overdueTasks, 'Count'],
        ['Pending Approvals', stats.pendingApprovals, 'Count'],
        ...Object.entries(stats.departmentDistribution).map(([dept, count]) => 
          [`Department: ${dept}`, count, 'Count']
        ),
      ];

      const csvContent = csvRows.map(row => row.join(',')).join('\n');
      downloadFile(csvContent, `analytics-${new Date().toISOString().split('T')[0]}.csv`, 'text/csv');
    } else {
      // Export as JSON
      const jsonContent = JSON.stringify(analyticsData, null, 2);
      downloadFile(jsonContent, `analytics-${new Date().toISOString().split('T')[0]}.json`, 'application/json');
    }
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const scheduleReport = (reportConfig: {
    name: string;
    frequency: 'daily' | 'weekly' | 'monthly';
    format: 'csv' | 'json' | 'pdf';
  }) => {
    const getNextRunDate = (frequency: string) => {
      const now = new Date();
      switch (frequency) {
        case 'daily':
          now.setDate(now.getDate() + 1);
          break;
        case 'weekly':
          now.setDate(now.getDate() + 7);
          break;
        case 'monthly':
          now.setMonth(now.getMonth() + 1);
          break;
      }
      return now.toISOString();
    };

    const newReport = {
      id: `report-${Date.now()}`,
      name: reportConfig.name,
      frequency: reportConfig.frequency,
      format: reportConfig.format,
      nextRun: getNextRunDate(reportConfig.frequency),
      enabled: true,
    };

    setScheduledReports(prev => [...prev, newReport]);
    
    // Log report scheduling activity
    logActivity({
      action: ACTIVITY_TYPES.REPORT_SCHEDULE,
      resource: 'scheduled_report',
      resourceId: newReport.id,
      details: { 
        reportName: reportConfig.name,
        frequency: reportConfig.frequency,
        format: reportConfig.format,
        nextRun: newReport.nextRun
      }
    });
    
    // In a real implementation, this would save to database and set up a cron job
    console.log('Scheduled report:', newReport);
    
    // Mock notification
    alert(`Report "${reportConfig.name}" scheduled successfully!`);
    setShowScheduleModal(false);
  };

  const toggleScheduledReport = (reportId: string) => {
    setScheduledReports(prev => 
      prev.map(report => 
        report.id === reportId 
          ? { ...report, enabled: !report.enabled }
          : report
      )
    );
  };

  const deleteScheduledReport = (reportId: string) => {
    setScheduledReports(prev => prev.filter(report => report.id !== reportId));
  };

  // Memoized calculations for better performance
  const roleSpecificStats = useMemo(() => {
    switch (userRole) {
      case "admin":
        return [
          {
            title: "Total Team Members",
            value: stats.totalUsers,
            icon: Users,
            color: "bg-blue-500",
            trend: `+${stats.newUsersThisMonth} this month`,
            link: "/admin",
          },
          {
            title: "System Health Score",
            value: Math.round(((stats.totalUsers - stats.overdueTasks) / stats.totalUsers) * 100) || 100,
            icon: Activity,
            color: "bg-green-500",
            trend: "Excellent",
            link: "/reports",
          },
          {
            title: "Active Applicants",
            value: stats.activeApplicants,
            icon: UserCheck,
            color: "bg-purple-500",
            trend: `${stats.applicantConversionRate}% conversion`,
            link: "/applicants",
          },
          {
            title: "Pending Approvals",
            value: stats.pendingApprovals,
            icon: Shield,
            color: "bg-red-500",
            trend: "Needs attention",
            link: "/documents",
          },
        ];
      case "mentor":
        return [
          {
            title: "My Mentees",
            value: stats.pendingOnboarding,
            icon: Users,
            color: "bg-blue-500",
            trend: "Active onboarding",
            link: "/onboarding",
          },
          {
            title: "Completion Rate",
            value: `${stats.taskCompletionRate}%`,
            icon: Target,
            color: "bg-green-500",
            trend: "Team performance",
            link: "/reports",
          },
          {
            title: "Training Sessions",
            value: Math.floor(stats.communicationsSentToday / 2) || 0,
            icon: BookOpen,
            color: "bg-purple-500",
            trend: "This week",
            link: "/communications",
          },
          {
            title: "Support Tickets",
            value: stats.overdueTasks,
            icon: AlertCircle,
            color: stats.overdueTasks > 0 ? "bg-yellow-500" : "bg-gray-500",
            trend: stats.overdueTasks > 0 ? "Needs review" : "All resolved",
            link: "/onboarding",
          },
        ];
      case "team_lead":
        return [
          {
            title: "Team Members",
            value: Math.floor(stats.totalUsers / 3) || 1,
            icon: Users,
            color: "bg-blue-500",
            trend: "Direct reports",
            link: "/team",
          },
          {
            title: "Team Tasks",
            value: stats.pendingOnboarding,
            icon: ClipboardList,
            color: "bg-yellow-500",
            trend: "In progress",
            link: "/onboarding",
          },
          {
            title: "Project Progress",
            value: `${Math.min(stats.taskCompletionRate + 10, 100)}%`,
            icon: TrendingUp,
            color: "bg-green-500",
            trend: "On track",
            link: "/reports",
          },
          {
            title: "Team Communications",
            value: stats.communicationsSentToday,
            icon: MessageSquare,
            color: "bg-purple-500",
            trend: "Today",
            link: "/communications",
          },
        ];
      case "intern":
        return [
          {
            title: "Learning Progress",
            value: `${Math.round((stats.completedTasks / Math.max(stats.myTasks, 1)) * 100)}%`,
            icon: BookOpen,
            color: "bg-blue-500",
            trend: `${stats.completedTasks}/${stats.myTasks} completed`,
            link: "/onboarding",
          },
          {
            title: "Completed Tasks",
            value: stats.completedTasks,
            icon: CheckCircle,
            color: "bg-green-500",
            trend: "Great progress!",
            link: "/onboarding",
          },
          {
            title: "Next Milestone",
            value: stats.myTasks - stats.completedTasks,
            icon: Target,
            color: "bg-purple-500",
            trend: "Tasks remaining",
            link: "/onboarding",
          },
          {
            title: "Mentor Sessions",
            value: Math.floor(Math.random() * 3) + 1,
            icon: Users,
            color: "bg-yellow-500",
            trend: "This week",
            link: "/team",
          },
        ];
      case "staff":
      default:
        return [
          {
            title: "My Tasks",
            value: stats.myTasks,
            icon: CheckSquare,
            color: "bg-blue-500",
            trend: `${stats.completedTasks}/${stats.myTasks} done`,
            link: "/onboarding",
          },
          {
            title: "Recent Activity",
            value: stats.completedTasks,
            icon: Activity,
            color: "bg-green-500",
            trend: "Tasks completed",
            link: "/onboarding",
          },
          {
            title: "Urgent Items",
            value: stats.overdueTasks,
            icon: AlertCircle,
            color: stats.overdueTasks > 0 ? "bg-red-500" : "bg-gray-500",
            trend: stats.overdueTasks > 0 ? "Action needed" : "All caught up",
            link: "/onboarding",
          },
          {
            title: "Resources",
            value: stats.recentDocuments,
            icon: FileText,
            color: "bg-purple-500",
            trend: "Available",
            link: "/documents",
          },
        ];
    }
  }, [userRole, stats]);

  const getRoleSpecificStats = () => roleSpecificStats;

  const quickActions = useMemo(() => {
    switch (userRole) {
      case "admin":
        return [
          { title: "Admin Panel", icon: Shield, link: "/admin", color: "text-red-600" },
          { title: "System Reports", icon: BarChart3, link: "/reports", color: "text-blue-600" },
          { title: "Manage Users", icon: Users, link: "/admin", color: "text-green-600" },
          { title: "Global Settings", icon: Settings, link: "/admin", color: "text-purple-600" },
        ];
      case "mentor":
        return [
          { title: "My Mentees", icon: Users, link: "/onboarding", color: "text-blue-600" },
          { title: "Create Training", icon: BookOpen, link: "/communications", color: "text-green-600" },
          { title: "Progress Review", icon: Target, link: "/reports", color: "text-purple-600" },
          { title: "Schedule Session", icon: Calendar, link: "/communications", color: "text-orange-600" },
        ];
      case "team_lead":
        return [
          { title: "Team Tasks", icon: ClipboardList, link: "/onboarding", color: "text-blue-600" },
          { title: "Team Messages", icon: MessageSquare, link: "/communications", color: "text-green-600" },
          { title: "Project Status", icon: TrendingUp, link: "/reports", color: "text-purple-600" },
          { title: "Review Applicants", icon: Briefcase, link: "/applicants", color: "text-orange-600" },
        ];
      case "intern":
        return [
          { title: "Learning Path", icon: BookOpen, link: "/onboarding", color: "text-blue-600" },
          { title: "Study Materials", icon: FileText, link: "/documents", color: "text-green-600" },
          { title: "Ask Mentor", icon: Users, link: "/team", color: "text-purple-600" },
          { title: "Progress Check", icon: Target, link: "/onboarding", color: "text-orange-600" },
        ];
      case "staff":
      default:
        return [
          { title: "My Tasks", icon: CheckSquare, link: "/onboarding", color: "text-blue-600" },
          { title: "My Documents", icon: FileText, link: "/documents", color: "text-green-600" },
          { title: "Team Directory", icon: Users, link: "/team", color: "text-purple-600" },
          { title: "Request Help", icon: Mail, link: "/communications", color: "text-orange-600" },
        ];
    }
  }, [userRole]);

  const getQuickActions = () => quickActions;

  if (loading) {
    return (
      <Layout user={user}>
        <div className="flex items-center justify-center h-96">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-black"></div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout user={user}>
      <div className="max-w-7xl mx-auto space-y-6 sm:space-y-8">
        {/* Welcome Section with Notifications */}
        <div className="bg-black rounded-2xl p-4 sm:p-6 lg:p-8 text-white relative overflow-hidden">
          <div className="absolute top-0 right-0 w-32 h-32 sm:w-64 sm:h-64 bg-white opacity-5 rounded-full -mr-16 sm:-mr-32 -mt-16 sm:-mt-32"></div>
          <div className="relative z-10">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start space-y-4 sm:space-y-0">
              <div className="flex-1">
                <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-2">
                  Welcome back, {userProfile?.firstName || user?.attributes?.given_name}!
                </h1>
                <p className="text-gray-300 mb-4">
                  {userRole === "admin" 
                    ? "Monitor system health, manage users, and oversee all HR operations"
                    : userRole === "mentor"
                    ? `Guide your ${stats.pendingOnboarding} mentees through their onboarding journey`
                    : userRole === "team_lead"
                    ? `Lead your team of ${Math.floor(stats.totalUsers / 3) || 1} members to success`
                    : userRole === "intern"
                    ? `You're ${Math.round((stats.completedTasks / Math.max(stats.myTasks, 1)) * 100) || 0}% through your learning journey`
                    : "Stay organized and connected with your team"}
                </p>
                <div className="flex items-center space-x-4">
                  <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-white bg-opacity-20 text-white">
                    {getRoleIcon(userRole)}
                    <span className="ml-1 capitalize">{userRole.replace("_", " ")}</span>
                  </span>
                  {userProfile?.department && (
                    <span className="text-sm text-gray-300">
                      {userProfile.department} Department
                    </span>
                  )}
                </div>
              </div>
              
              <div className="flex items-center space-x-2 sm:space-x-3 flex-shrink-0">
                <button
                  onClick={() => {
                    logActivity({
                      action: ACTIVITY_TYPES.SYSTEM_REFRESH,
                      resource: 'dashboard',
                      details: { triggeredByUser: true }
                    });
                    fetchDashboardData(true);
                  }}
                  disabled={refreshing}
                  className="p-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-colors disabled:opacity-50 touch-target"
                  title="Refresh dashboard data"
                >
                  <RefreshCw className={`w-4 h-4 sm:w-5 sm:h-5 ${refreshing ? 'animate-spin' : ''}`} />
                </button>
                <div className="relative">
                  <button 
                    onClick={() => setShowNotifications(!showNotifications)}
                    className="p-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-colors relative touch-target"
                  >
                    <Bell className="w-4 h-4 sm:w-6 sm:h-6" />
                    {notifications.filter(n => !n.read).length > 0 && (
                      <span className="absolute top-0 right-0 w-2 h-2 sm:w-3 sm:h-3 bg-red-500 rounded-full"></span>
                    )}
                  </button>
                
                {showNotifications && (
                  <div className="absolute right-0 mt-2 w-72 sm:w-80 bg-white rounded-lg shadow-xl z-50 text-gray-900 modal-mobile">
                    <div className="p-3 sm:p-4 border-b border-gray-200">
                      <h3 className="font-semibold text-sm sm:text-base">Notifications</h3>
                    </div>
                    <div className="max-h-64 sm:max-h-96 overflow-y-auto touch-scroll">
                      {notifications.length > 0 ? (
                        notifications.map((notif) => (
                          <div key={notif.id} className="p-4 border-b border-gray-100 hover:bg-gray-50">
                            <div className="flex items-start space-x-3">
                              <div className={`p-2 rounded-lg ${
                                notif.type === "warning" ? "bg-yellow-100" :
                                notif.type === "error" ? "bg-red-100" :
                                notif.type === "success" ? "bg-green-100" :
                                "bg-blue-100"
                              }`}>
                                {notif.type === "warning" ? <AlertCircle className="w-4 h-4 text-yellow-600" /> :
                                 notif.type === "error" ? <XCircle className="w-4 h-4 text-red-600" /> :
                                 notif.type === "success" ? <CheckCircle className="w-4 h-4 text-green-600" /> :
                                 <Info className="w-4 h-4 text-blue-600" />}
                              </div>
                              <div className="flex-1">
                                <p className="font-medium text-sm">{notif.title}</p>
                                <p className="text-sm text-gray-600 mt-1">{notif.message}</p>
                                <p className="text-xs text-gray-400 mt-2">
                                  {new Date(notif.time).toLocaleTimeString()}
                                </p>
                              </div>
                            </div>
                          </div>
                        ))
                      ) : (
                        <div className="p-8 text-center text-gray-500">
                          <Bell className="w-8 h-8 mx-auto mb-2 text-gray-300" />
                          <p>No new notifications</p>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
          {getRoleSpecificStats().map((stat, index) => {
            const Icon = stat.icon;
            return (
              <Link
                key={index}
                href={stat.link}
                className="bg-white rounded-xl shadow-sm p-6 hover:shadow-md transition-all transform hover:-translate-y-1"
              >
                <div className="flex items-center justify-between mb-4">
                  <div className={`p-3 rounded-lg ${stat.color} bg-opacity-10`}>
                    <Icon className={`w-6 h-6 ${stat.color.replace('bg-', 'text-')}`} />
                  </div>
                  <span className="text-sm font-medium text-gray-500 flex items-center">
                    {stat.trend}
                  </span>
                </div>
                <h3 className="text-2xl font-bold text-gray-900">{stat.value}</h3>
                <p className="text-sm text-gray-600 mt-1">{stat.title}</p>
              </Link>
            );
          })}
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
          {/* Tasks/Activity Column */}
          <div className="lg:col-span-2 space-y-6 lg:space-y-8">
            {/* Upcoming Tasks */}
            {upcomingTasks.length > 0 && (
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-gray-900">
                    {userRole === "admin" || userRole === "mentor" || userRole === "team_lead" 
                      ? "Pending Tasks Overview" 
                      : "My Upcoming Tasks"}
                  </h2>
                  <Link href="/onboarding" className="text-black hover:text-gray-700 text-sm font-medium flex items-center">
                    View All
                    <ArrowRight className="w-4 h-4 ml-1" />
                  </Link>
                </div>
                <div className="space-y-3">
                  {upcomingTasks.map((task) => (
                    <div key={task.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-lg ${
                          task.status === "overdue" ? "bg-red-100" :
                          task.status === "in_progress" ? "bg-yellow-100" :
                          "bg-gray-100"
                        }`}>
                          {task.status === "overdue" ? <AlertCircle className="w-4 h-4 text-red-600" /> :
                           task.status === "in_progress" ? <Clock className="w-4 h-4 text-yellow-600" /> :
                           <Circle className="w-4 h-4 text-gray-600" />}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">{task.title}</p>
                          <p className="text-sm text-gray-500">
                            Due: {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : "No due date"}
                          </p>
                        </div>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        task.status === "overdue" ? "bg-red-100 text-red-700" :
                        task.status === "in_progress" ? "bg-yellow-100 text-yellow-700" :
                        "bg-gray-100 text-gray-700"
                      }`}>
                        {task.status}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Recent Activity */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h2>
              <div className="space-y-4">
                {recentActivity.length > 0 ? (
                  recentActivity.map((activity) => {
                    const Icon = activity.icon;
                    return (
                      <div key={activity.id} className="flex items-start space-x-3">
                        <div className={`p-2 rounded-lg bg-gray-100`}>
                          <Icon className={`w-4 h-4 ${activity.color}`} />
                        </div>
                        <div className="flex-1">
                          <p className="text-gray-900">{activity.title}</p>
                          <p className="text-sm text-gray-500">
                            {new Date(activity.time).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                    );
                  })
                ) : (
                  <p className="text-gray-500 text-center py-8">No recent activity</p>
                )}
              </div>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="space-y-8">
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
              <div className="grid grid-cols-2 gap-4">
                {getQuickActions().map((action, index) => {
                  const Icon = action.icon;
                  return (
                    <Link
                      key={index}
                      href={action.link}
                      className="flex flex-col items-center justify-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors group"
                    >
                      <Icon className={`w-8 h-8 ${action.color} mb-2 group-hover:scale-110 transition-transform`} />
                      <span className="text-sm font-medium text-center">{action.title}</span>
                    </Link>
                  );
                })}
              </div>
            </div>

            {/* Progress Card for Non-Managers */}
            {(userRole === "intern" || userRole === "staff") && stats.myTasks > 0 && (
              <div className="bg-gradient-to-br from-gray-900 to-gray-700 rounded-xl p-6 text-white">
                <h3 className="text-lg font-semibold mb-4">Your Progress</h3>
                <div className="mb-4">
                  <div className="flex justify-between text-sm mb-2">
                    <span>Onboarding Completion</span>
                    <span>{Math.round((stats.completedTasks / stats.myTasks) * 100)}%</span>
                  </div>
                  <div className="w-full bg-gray-600 rounded-full h-3">
                    <div 
                      className="bg-white h-3 rounded-full transition-all duration-300"
                      style={{ width: `${(stats.completedTasks / stats.myTasks) * 100}%` }}
                    />
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4 text-center">
                  <div>
                    <p className="text-2xl font-bold">{stats.completedTasks}</p>
                    <p className="text-sm text-gray-300">Completed</p>
                  </div>
                  <div>
                    <p className="text-2xl font-bold">{stats.myTasks - stats.completedTasks}</p>
                    <p className="text-sm text-gray-300">Remaining</p>
                  </div>
                </div>
              </div>
            )}

            {/* Admin Quick Stats */}
            {userRole === "admin" && (
              <div className="space-y-6">
                <div className="bg-white rounded-xl shadow-sm p-6">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">System Health</h3>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Active Users</span>
                      <span className="font-medium">{stats.totalUsers}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Pending Tasks</span>
                      <span className="font-medium text-yellow-600">{stats.pendingOnboarding}</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Open Applications</span>
                      <span className="font-medium text-blue-600">{stats.activeApplicants}</span>
                    </div>
                    <Link 
                      href="/admin"
                      className="block w-full mt-4 text-center px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors"
                    >
                      Admin Panel
                    </Link>
                  </div>
                </div>

                {/* Activity Log Preview */}
                <AdminActivityLogPreview />
              </div>
            )}
          </div>
        </div>

        {/* Analytics Section - For Admin/Managers */}
        {(userRole === "admin" || userRole === "mentor" || userRole === "team_lead") && (
          <div className="mt-8 space-y-8">
            {/* Analytics Header */}
            <div className="flex items-center justify-between">
              <h2 className="text-xl font-bold text-gray-900">Analytics & Insights</h2>
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => exportAnalyticsData('csv')}
                  className="flex items-center px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export CSV
                </button>
                <button
                  onClick={() => exportAnalyticsData('json')}
                  className="flex items-center px-3 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Export JSON
                </button>
                <button
                  onClick={() => setShowScheduleModal(true)}
                  className="flex items-center px-3 py-2 text-sm bg-black text-white hover:bg-gray-800 rounded-lg transition-colors"
                >
                  <Calendar className="w-4 h-4 mr-2" />
                  Schedule Report
                </button>
                <Link href="/reports" className="text-black hover:text-gray-700 text-sm font-medium flex items-center">
                  View Detailed Reports
                  <ArrowRight className="w-4 h-4 ml-1" />
                </Link>
              </div>
            </div>

            {/* Key Metrics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-lg bg-green-100">
                    <TrendingUp className="w-6 h-6 text-green-600" />
                  </div>
                  <span className={`flex items-center text-sm font-medium ${
                    stats.userGrowthRate > 0 ? "text-green-600" : "text-red-600"
                  }`}>
                    {stats.userGrowthRate > 0 ? <ArrowUpRight className="w-4 h-4 mr-1" /> : <ArrowDownRight className="w-4 h-4 mr-1" />}
                    {Math.abs(stats.userGrowthRate)}%
                  </span>
                </div>
                <h3 className="text-2xl font-bold text-gray-900">{stats.newUsersThisMonth}</h3>
                <p className="text-sm text-gray-600 mt-1">New Users This Month</p>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-lg bg-blue-100">
                    <Clock className="w-6 h-6 text-blue-600" />
                  </div>
                  <span className="text-sm font-medium text-gray-500">
                    days avg
                  </span>
                </div>
                <h3 className="text-2xl font-bold text-gray-900">{stats.avgOnboardingTime}</h3>
                <p className="text-sm text-gray-600 mt-1">Avg Onboarding Time</p>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-lg bg-purple-100">
                    <CheckCircle className="w-6 h-6 text-purple-600" />
                  </div>
                  <span className="text-sm font-medium text-gray-500">
                    completion
                  </span>
                </div>
                <h3 className="text-2xl font-bold text-gray-900">{stats.taskCompletionRate}%</h3>
                <p className="text-sm text-gray-600 mt-1">Task Completion Rate</p>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="p-3 rounded-lg bg-yellow-100">
                    <Briefcase className="w-6 h-6 text-yellow-600" />
                  </div>
                  <span className="text-sm font-medium text-gray-500">
                    hired
                  </span>
                </div>
                <h3 className="text-2xl font-bold text-gray-900">{stats.applicantConversionRate}%</h3>
                <p className="text-sm text-gray-600 mt-1">Applicant Conversion</p>
              </div>
            </div>

            {/* Charts Row */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* Monthly Trends Chart */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Monthly Trends</h3>
                <div className="space-y-4">
                  {stats.monthlyStats.map((month, index) => {
                    const maxValue = Math.max(...stats.monthlyStats.map(m => 
                      Math.max(m.users, m.tasks, m.applicants)
                    ));
                    return (
                      <div key={month.month} className="space-y-2">
                        <div className="flex items-center justify-between text-sm">
                          <span className="font-medium text-gray-700">{month.month}</span>
                          <div className="flex items-center space-x-4 text-xs">
                            <span className="text-blue-600">{month.users} users</span>
                            <span className="text-green-600">{month.tasks} tasks</span>
                            <span className="text-purple-600">{month.applicants} applicants</span>
                          </div>
                        </div>
                        <div className="relative">
                          <div className="flex space-x-1">
                            <div 
                              className="h-6 bg-blue-200 rounded transition-all duration-300"
                              style={{ width: `${(month.users / maxValue) * 100}%` }}
                              title={`${month.users} users`}
                            />
                          </div>
                          <div className="flex space-x-1 mt-1">
                            <div 
                              className="h-6 bg-green-200 rounded transition-all duration-300"
                              style={{ width: `${(month.tasks / maxValue) * 100}%` }}
                              title={`${month.tasks} tasks`}
                            />
                          </div>
                          <div className="flex space-x-1 mt-1">
                            <div 
                              className="h-6 bg-purple-200 rounded transition-all duration-300"
                              style={{ width: `${(month.applicants / maxValue) * 100}%` }}
                              title={`${month.applicants} applicants`}
                            />
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  <div className="flex items-center justify-center space-x-6 mt-4 text-xs">
                    <span className="flex items-center">
                      <div className="w-3 h-3 bg-blue-200 rounded mr-2"></div>
                      Users
                    </span>
                    <span className="flex items-center">
                      <div className="w-3 h-3 bg-green-200 rounded mr-2"></div>
                      Tasks
                    </span>
                    <span className="flex items-center">
                      <div className="w-3 h-3 bg-purple-200 rounded mr-2"></div>
                      Applicants
                    </span>
                  </div>
                </div>
              </div>

              {/* Department Distribution */}
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Department Distribution</h3>
                <div className="space-y-4">
                  {Object.entries(stats.departmentDistribution)
                    .sort((a, b) => b[1] - a[1])
                    .slice(0, 5)
                    .map(([dept, count], index) => {
                      const percentage = Math.round((count / stats.totalUsers) * 100);
                      const colors = [
                        "bg-blue-500",
                        "bg-green-500",
                        "bg-purple-500",
                        "bg-yellow-500",
                        "bg-pink-500",
                      ];
                      return (
                        <div key={dept} className="space-y-2">
                          <div className="flex items-center justify-between">
                            <span className="text-sm font-medium text-gray-700">{dept}</span>
                            <span className="text-sm text-gray-500">{count} ({percentage}%)</span>
                          </div>
                          <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                              className={`${colors[index]} h-2 rounded-full transition-all duration-300`}
                              style={{ width: `${percentage}%` }}
                            />
                          </div>
                        </div>
                      );
                    })}
                  {Object.keys(stats.departmentDistribution).length === 0 && (
                    <p className="text-center text-gray-500 py-8">No department data available</p>
                  )}
                </div>
              </div>
            </div>

            {/* Activity Summary */}
            <div className="bg-gradient-to-r from-black to-gray-800 rounded-xl p-8 text-white">
              <h3 className="text-xl font-bold mb-6">Today's Activity Summary</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center">
                  <p className="text-3xl font-bold">{stats.communicationsSentToday}</p>
                  <p className="text-gray-300 mt-1">Messages Sent</p>
                </div>
                <div className="text-center">
                  <p className="text-3xl font-bold">{stats.overdueTasks}</p>
                  <p className="text-gray-300 mt-1">Overdue Tasks</p>
                </div>
                <div className="text-center">
                  <p className="text-3xl font-bold">{stats.pendingApprovals}</p>
                  <p className="text-gray-300 mt-1">Pending Approvals</p>
                </div>
              </div>
            </div>

            {/* Scheduled Reports */}
            {scheduledReports.length > 0 && (
              <div className="bg-white rounded-xl shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Scheduled Reports</h3>
                <div className="space-y-3">
                  {scheduledReports.map((report) => (
                    <div key={report.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-lg ${report.enabled ? 'bg-green-100' : 'bg-gray-100'}`}>
                          <Calendar className={`w-4 h-4 ${report.enabled ? 'text-green-600' : 'text-gray-400'}`} />
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">{report.name}</p>
                          <p className="text-sm text-gray-500">
                            {report.frequency} • {report.format.toUpperCase()} • Next: {new Date(report.nextRun).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => toggleScheduledReport(report.id)}
                          className={`p-2 rounded-lg transition-colors ${
                            report.enabled 
                              ? 'text-green-600 hover:bg-green-100' 
                              : 'text-gray-400 hover:bg-gray-100'
                          }`}
                          title={report.enabled ? 'Disable' : 'Enable'}
                        >
                          <CheckCircle className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => deleteScheduledReport(report.id)}
                          className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors"
                          title="Delete"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {/* Schedule Report Modal */}
        {showScheduleModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h2 className="text-xl font-bold mb-4">Schedule Automated Report</h2>
              <form onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target as HTMLFormElement);
                scheduleReport({
                  name: formData.get('name') as string,
                  frequency: formData.get('frequency') as 'daily' | 'weekly' | 'monthly',
                  format: formData.get('format') as 'csv' | 'json' | 'pdf',
                });
              }}>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Report Name
                    </label>
                    <input
                      type="text"
                      name="name"
                      placeholder="e.g., Weekly Analytics Summary"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Frequency
                    </label>
                    <select
                      name="frequency"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                      required
                    >
                      <option value="daily">Daily</option>
                      <option value="weekly">Weekly</option>
                      <option value="monthly">Monthly</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Format
                    </label>
                    <select
                      name="format"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-transparent"
                      required
                    >
                      <option value="csv">CSV</option>
                      <option value="json">JSON</option>
                      <option value="pdf">PDF</option>
                    </select>
                  </div>
                </div>
                <div className="flex justify-end space-x-4 mt-6">
                  <button
                    type="button"
                    onClick={() => setShowScheduleModal(false)}
                    className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors"
                  >
                    Schedule Report
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
}

function AdminActivityLogPreview() {
  const { getActivityLogs } = useActivityLogger();
  const [logs, setLogs] = useState<any[]>([]);

  useEffect(() => {
    const activityLogs = getActivityLogs();
    setLogs(activityLogs.slice(-10).reverse()); // Show last 10 logs, most recent first
  }, [getActivityLogs]);

  const getActionIcon = (action: string) => {
    switch (action) {
      case ACTIVITY_TYPES.PAGE_VIEW:
        return <Activity className="w-4 h-4 text-blue-500" />;
      case ACTIVITY_TYPES.SYSTEM_REFRESH:
        return <RefreshCw className="w-4 h-4 text-green-500" />;
      case ACTIVITY_TYPES.REPORT_EXPORT:
        return <Download className="w-4 h-4 text-purple-500" />;
      case ACTIVITY_TYPES.REPORT_SCHEDULE:
        return <Calendar className="w-4 h-4 text-orange-500" />;
      default:
        return <Circle className="w-4 h-4 text-gray-500" />;
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Recent Activity</h3>
        <button 
          onClick={() => {
            const allLogs = getActivityLogs();
            console.table(allLogs);
          }}
          className="text-sm text-gray-600 hover:text-gray-900"
        >
          View All
        </button>
      </div>
      <div className="space-y-3 max-h-64 overflow-y-auto">
        {logs.length > 0 ? (
          logs.map((log, index) => (
            <div key={index} className="flex items-start space-x-3 p-2 hover:bg-gray-50 rounded-lg">
              <div className="mt-1">
                {getActionIcon(log.action)}
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900">
                  {log.userEmail?.split('@')[0]} • {log.action.replace('_', ' ')}
                </p>
                <p className="text-xs text-gray-500">
                  {log.resource} • {new Date(log.timestamp).toLocaleTimeString()}
                </p>
                {log.details && Object.keys(log.details).length > 0 && (
                  <p className="text-xs text-gray-400 mt-1">
                    {JSON.stringify(log.details).substring(0, 50)}...
                  </p>
                )}
              </div>
            </div>
          ))
        ) : (
          <p className="text-sm text-gray-500 text-center py-4">No activity logs yet</p>
        )}
      </div>
    </div>
  );
}

function getRoleIcon(role?: string) {
  switch (role) {
    case "admin":
      return <Shield className="w-4 h-4" />;
    case "mentor":
      return <Award className="w-4 h-4" />;
    case "team_lead":
      return <Target className="w-4 h-4" />;
    case "intern":
      return <Briefcase className="w-4 h-4" />;
    default:
      return <Users className="w-4 h-4" />;
  }
}

export default function App() {
  return (
    <Authenticator>
      {({ signOut, user }) => (
        user ? <Dashboard user={user} /> : null
      )}
    </Authenticator>
  );
}